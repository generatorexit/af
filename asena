#!/usr/bin/env python3

import os, random, time, datetime
from prompt_toolkit import PromptSession
from prompt_toolkit.history import InMemoryHistory
from prompt_toolkit.completion import NestedCompleter
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.cursor_shapes import ModalCursorShapeConfig
from prompt_toolkit.styles import Style

from typing import Dict, FrozenSet, Union

from core.asena_core import MODULES, COMMANDS, VARIABLES, database

from core.logger import Logger, console
from core.abstract.module import ModuleBase
from core.abstract.command import CommandBase
from core.types import ModuleType, CommandType
from core.utils.shell import parse_user_input

from core.asena_core import (
    set_title,
    routine,
    banner,
    # asena_prompt as input,
)

set_title
routine()
banner()
# input()


###

TIPS = (
    "Type 'help' to see a list of available commands.",
    "Use '!command' to run a command in the shell.",
    "If you are using a Nerd Font, you can use 'set logging-type nerdfont'.",
    "Subscribe to my twitter: @generatorexit",
)

class Shell:
    """Shell class for Asena-Framework"""

    def __init__(self):
        self.selected_module: Union[ModuleBase, None] = None

        # list containing module objects
        self.modules: FrozenSet[ModuleType] = frozenset(
            module for module in MODULES if issubclass(module, ModuleBase)
        )

        # list containing commands objects
        self.commands: FrozenSet[CommandType] = frozenset(
            command for command in COMMANDS if issubclass(command, CommandBase)
        )

        # dictionnary to convert string to module object
        self.modules_map: Dict[str, ModuleType] = {
            module.name.lower(): module for module in self.modules
        }

        # dictionnary to convert string to command object
        self.commands_map: Dict[str, CommandType] = {}

        for command in self.commands:
            self.commands_map[command.command.lower()] = command

            for alias in command.aliases:
                self.commands_map[alias.lower()] = command

        # setup completer
        json_data = {}

        for command in self.commands_map.values():
            command = command((), self, console, database)
            command.init_arguments()

            json_data[command.command] = {
                argument: None for argument in command.parser.completions
            }

            # add from developer-provided arguments
            for argument in command._arguments:
                if argument not in json_data[command.command].keys():
                    json_data[command.command][argument] = None

        self.completer = NestedCompleter.from_nested_dict(json_data)

        # prompt style
        style = Style.from_dict(
            {
                "bottom-toolbar": "#aaaa00 bg:#ff0000",
                "bottom-toolbar.text": "#aaaa44 bg:#aa4444",
                "rprompt": "bg:#ff0066 #ffffff",
            }
            )

        # setup prompt
        self.prompt_session = PromptSession(
            style=style,
            refresh_interval=1,
            cursor=ModalCursorShapeConfig(),vi_mode=True,enable_suspend=True,
            placeholder=HTML('<style color="#888888">(tips or hints)</style>'),
            rprompt=" <asena> ",
            completer=self.completer,
            # complete_style=CompleteStyle.READLINE_LIKE,
            complete_while_typing=True,
            # bottom_toolbar="This is a toolbar",
            wrap_lines=False,
            history=InMemoryHistory(
                [command.command for command in self.commands]
            ),
        )

    @property
    def execution_time(self) -> int:
        """Get last command execution time"""
        return round(abs(self.start_time - self.end_time))

    @property
    def prompt(self):
        """Get shell prompt"""

        now = datetime.datetime.now()
        strf = datetime.datetime.strftime(now, '%X')

        prompt = [
            # https://www.w3.org/wiki/CSS/Properties/color/keywords
            # ("bg:#008800 #ffffff", f"{now.hour}:{now.minute}:{now.second}"),
            ("bg:#008800 fg:cornsilk", f"{strf}"),
            ("bg:cornsilk fg:maroon", "asena"),
            ]

        if self.selected_module is not None:
            prompt += [
                ("bg:cornsilk fg:maroon", ":"),
                ("bg:cornsilk fg:maroon", f"({self.selected_module.name})"),
                ]

        if self.execution_time >= 2:
            prompt += [
                ("bg:cornsilk fg:maroon", ":"),
                ("bg:cornsilk fg:maroon", f"took {self.execution_time}s"),
                ]

        prompt += [
            ("bg:cornsilk fg:maroon", f" {VARIABLES['prompt-char'][0]}"),
            ]

        return prompt

    def handle_command_line(self, user_input: str) -> None:
        """Handle user input"""
        if not user_input:
            return

        if user_input.startswith("!"):
            os.system(user_input[1:])
            return

        command, arguments = parse_user_input(user_input)

        command_cls = self.commands_map.get(command, None)

        if command_cls is None:
            Logger.error(f"Unknown command: '{command}'.")
            return

        command = command_cls(arguments, self, console, database)
        command.init_arguments()

        if "-h" in arguments or "--help" in arguments:
            return command.parser.print_help()

        try:
            command.arguments = command.parser.parse_args(arguments)
            command.execute()

        except Exception as e:
            if VARIABLES["exceptions_debug"][0] == "false":
                Logger.error(str(e))
                return

            return console.print_exception()

    def run(self) -> None:
        """Run the shell"""

        self.handle_command_line("clear -d")  # clear screen

        Logger.info(f"{random.choice(TIPS)}\n")

        self.start_time = time.time()

        while True:
            try:
                self.end_time = time.time()

                user_input = self.prompt_session.prompt(self.prompt)

                self.start_time = time.time()

                self.handle_command_line(user_input)
            except KeyboardInterrupt:
                pass  # Ctrl-C pressed.
            except EOFError:
                pass # CTRL+D pressed.
            except Exception as e:
                print(f'Unknown error occurred. Error: {e}')

shell = Shell()

shell.run()

